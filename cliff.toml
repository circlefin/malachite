# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }}

    *{{ timestamp | date(format="%B %-d, %Y") }}*

    ## 📖 Release notes
    See [`RELEASE_NOTES.md`](./RELEASE_NOTES.md#{{ version | trim_start_matches(pat="v") }}) for the release notes.

    ### ⚠️ Breaking changes
    See [`BREAKING_CHANGES.md`](./BREAKING_CHANGES.md#{{ version | trim_start_matches(pat="v") }}) for the list of breaking changes.
{% else %}\
    ## Unreleased
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/informalsystems/malachite" },
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/pull/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = ".*Telegram.*", skip = true },
  { message = ".*Add git.*", skip = true },
  { message = ".*Remove git.*", skip = true },
  { message = "^chore|^ci", skip = true },
  { message = "^feat\\(code", group = "<!-- 1 -->🚀 Features" },
  { message = "^fix\\(code", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "^.*\\(spec", group = "<!-- 0 -->🧪 Specifications" },
  { message = "^.*\\(doc", group = "<!-- 3 -->📄 Documentation" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
  { message = ".*", skip = true },
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
