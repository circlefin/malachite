# Environment variables for the servers
# CANDC - the IP address of the command and control server (CC is used by compilers)
# (SERVERNAME) - the ip address of the node server for manual commands
# D_N - the number of node servers in total
# PSSH_H - space-separated list of all the node server IP addresses for pssh input
# PSSH_P - the number of parallel processes to run with pssh
# D_RM - flag to remove the container after it stops
# MALACHITE_DIR - the path to the malachite repository directory
##
# Aliases for easy manual access to the servers (don't use these in scripts)
# (servername) - the "docker" command but executes on the server (candc for the cc server)
# (ssh-servername) - ssh into the server
##
# Additional functionality in shell functions (see README for more info)
# xssh - parallel ssh command to all servers. Change PSSH_H and PSSH_P for different behavior.
# get_ip - get the IP address of a node server for programmatic use (example: get_ip 0)
# ok_cc - check if the CC server is ready to be used and update its services (DNS hosts, commands.sh, etc)
# ok_all - check if all servers are ready to be used (scanning the SSH keys could take a while)
# deploy_cc - deploys the local source code to the cc server, builds the node image and pushes it to the registry
# setup_config - create configuration on the cc server
# dnode - run a docker command on a node server (example: cnode 0 ps)
# dnode-run - run the application on a node server. Accepts list of IDs. (example: dnode-run 0 1 2)
# dnode-log - get the logs of the application from a node server (example: cnode-log 0)
# dnode-stop - stop the application on a node server (example: cnode-stop 0)
# download_data - download the prometheus data from the cc server (it will stop prometheus while exporting)
##

export CANDC="${cc.ip}"
%{~ for n in concat(small, large) }
export ${upper(n.name)}="${n.ip}"
%{~ endfor }
export D_N="${length(small)+length(large)}"
export D_SMALL="${length(small)}"
export D_LARGE="${length(large)}"
export D_REGION="${region}"
export PSSH_H="${join(" ",ips)}"
export PSSH_P="15"
export D_RM="--rm"
export MALACHITE_DIR="$(dirname $(dirname ${path}))"

alias candc="docker -H ssh://root@${cc.ip}"
%{~ for i,n in concat(small, large) }
alias ${n.name}="docker -H ssh://root@${n.ip}"
alias node${i}="docker -H ssh://root@${n.ip}"
%{~ endfor }
alias ssh-candc="ssh -A root@${cc.ip}"
alias ssh-cc="ssh -A root@${cc.ip}"
%{~ for i,n in concat(small, large) }
alias ssh-${n.name}="ssh -A root@${n.ip}"
alias ssh-node${i}="ssh -A root@${n.ip}"
%{~ endfor }

xssh() {
  pssh -l root -i -v -p $PSSH_P -H "$PSSH_H" "$@"
}

get_ip() {
  I="$1"
%{~ for i, n in concat(small, large) }
  test "$I" -eq "${i}" && echo "${n.ip}" && return
%{~ endfor }
  echo "IP for node $I not found" && return 1
}

ok_all() {
  _keyscan_all_servers 2> /dev/null
  xssh "cat /etc/done && mount /data" # Mount /data in case a QA node came online earlier than CC
}

ok_cc() {
  _keyscan_cc 2> /dev/null
  PSSH_P=1 PSSH_H=${cc.ip} xssh "cat /etc/done" && \
    echo "Updating cc server..." && \
    scp -q "$${1:-$${MALACHITE_DIR}/qa/terraform/hosts}" root@${cc.ip}:/etc/hosts && \
    ssh root@${cc.ip} "systemctl restart dnsmasq" && \
    scp -q "$${1:-$${MALACHITE_DIR}/qa/terraform/commands.sh}" root@${cc.ip}:/etc/profile.d/commands.sh && \
    ssh root@${cc.ip} \
      "sed -i 's,^export MALACHITE_DIR=.*,export MALACHITE_DIR=/root/malachite,' /etc/profile.d/commands.sh && source /etc/profile.d/commands.sh && _keyscan_all_servers 2> /dev/null"
}

_keyscan_cc() {
  ssh-keygen -R ${cc.ip} > /dev/null
  ssh-keyscan -t ed25519 ${cc.ip} >> $HOME/.ssh/known_hosts
}

_keyscan_all_servers() {
  _keyscan_cc 2> /dev/null
%{~ for n in concat(small, large) }
  ssh-keygen -R ${n.ip} > /dev/null
  ssh-keyscan -t ed25519 ${n.ip} >> $HOME/.ssh/known_hosts 2> /dev/null
%{~ endfor }
}

deploy_cc() {
  test -d $MALACHITE_DIR/code || (echo "Source code repository not found. Clone or copy manually." && return 1)
  test -f /etc/cc || CC_SHIM="-H ssh://root@${cc.ip}"
  docker $CC_SHIM build --push -t cc.testnet/node --build-context code=$MALACHITE_DIR/code $MALACHITE_DIR/qa/docker
}

_deploy_cc() { # Alternative deployment, testing shows minimal speed difference
  rsync -avz --exclude target $MALACHITE_DIR/code root@${cc.ip}:/root/malachite/code/
  rsync -avz --exclude terraform $MALACHITE_DIR/qa root@${cc.ip}:/root/malachite/qa/
  ssh-cc docker build --push -t cc.testnet/node --build-context code=$MALACHITE_DIR/code $MALACHITE_DIR/qa/docker
}

_persistent_peers() {
  port=$${1:-27000}

  persistent_peers=""
  for i in $(seq 0 ${length(small)-1})
  do
    persistent_peers="$persistent_peers,/dns/small$i/udp/$port/quic-v1"
  done
  for i in $(seq 0 ${length(large)-1})
  do
    persistent_peers="$persistent_peers,/dns/large$i/udp/$port/quic-v1"
  done
  echo $${persistent_peers##,}
}

_change_config() {
  while (( "$#" ));
  do
    file="/data/$1/config/config.toml"
    sconfig "$file" \
      "moniker=test-$1" \
      "consensus.p2p.listen_addr=/ip4/0.0.0.0/udp/27000/quic-v1" \
      "mempool.p2p.listen_addr=/ip4/0.0.0.0/udp/28000/quic-v1" \
      "metrics.listen_addr=0.0.0.0:9000" && \
    sconfig "$file" -t stringSlice \
      "consensus.p2p.persistent_peers=$(_persistent_peers)" \
      "mempool.p2p.persistent_peers=$(_persistent_peers 28000)" &
    shift
  done
}

setup_config() {
  docker -H ssh://root@${cc.ip} run -d --pull always --dns ${cc.internal_ip} -v /data:/data -e RUST_LOG ${cc.internal_ip}/node --home /data testnet --nodes ${length(small)+length(large)} --deterministic
  ssh root@${cc.ip} "source /etc/profile.d/commands.sh && _change_config \$(seq 0 ${length(small)+length(large)-1})"
}

_parse_multiple_hosts() {
  PSSH_X=""
  if [ "$1" = "all" ]; then
    PSSH_X="$PSSH_H"
  else
    while (( "$#" ));
    do
      PSSH_X="$PSSH_X $(get_ip "$1")"
      shift
    done
  fi
  echo "$PSSH_X"
}

dnode() {
  ID="$1"
  shift
  docker -H ssh://root@$(get_ip "$ID") "$@"
}

dnode-run() {
  PSSH_H="$(_parse_multiple_hosts "$@")" xssh docker run -d -p 27000:27000/udp -p 28000:28000/udp -p 9000:9000/tcp --name node --cap-add=NET_ADMIN --pull always $D_RM --dns ${cc.internal_ip} -v /data:/data -v /config:/config -e RUST_LOG ${cc.internal_ip}/node --home /config start
}

dnode-log() {
  IP="$(get_ip "$1")"
  F=""
  if [ "$${1:-}" = "-f" ]; then
    F="-f"
    IP="$(get_ip "$2")"
  else
    if [ "$${2:-}" = "-f" ]; then
      F="-f"
    fi
  fi
  docker -H ssh://root@$IP logs $F node
}

dnode-stop() {
  PSSH_H="$(_parse_multiple_hosts "$@")" xssh docker stop node
}

cheat_sheet() {
cat <<EOF
    ok_cc
    deploy_cc # you can run this on cc too, if you have the source code in /root/malachite

    ssh-cc
    ok_all
    setup_config # depends on deploy_cc

    dnode-run all

    download_data
EOF
}

update_commands() { # for internal developer use, when you change commands.sh too often
  echo terraform apply -var small_nodes=$D_SMALL -var large_nodes=$D_LARGE
  echo source commands.sh
  echo scp -q "$${1:-$${MALACHITE_DIR}/qa/terraform/commands.sh}" root@${cc.ip}:/etc/profile.d/commands.sh
}

fetch_logs() {
  PSSH_H="$(_parse_multiple_hosts "$@")" xssh -o node_log_out -e node_log_err "docker logs node"
}

download_data() { # needs to run on the local machine for scp to have any use
  ssh-cc <<EOF
    systemctl stop prometheus
     rm prometheus.tgz 2> /dev/null
     echo "Database export date: $(date)" > /var/lib/prometheus/date.txt
     tar -cvzf prometheus.tgz -C /var/lib/prometheus .
    systemctl start prometheus
EOF
  scp -r root@$CANDC:prometheus.tgz .
}

for_sure() {
    set -eu
    terraform apply -var small_nodes=$D_SMALL -var large_nodes=$D_LARGE -var region=$D_REGION -auto-approve
    source commands.sh
    ok_cc
}