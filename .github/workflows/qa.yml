name: QA

on:
  workflow_dispatch:
  push:
    branches:
      - nenad/800-run-qa-from-git

jobs:
  run-malachite-do:
    runs-on: ubuntu-latest
    env:
      BINARY_NAME: informalsystems-malachitebft-starknet-app
      NODE_COUNT: 3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0 

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply (Provision Nodes)
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="do_ssh_fingerprint=${{ secrets.DO_SSH_FINGERPRINT }}" \
            -var="node_count=${{ env.NODE_COUNT }}"

      - name: Wait for Droplets to Fully Initialize
        run: sleep 10

      - name: Fetch Node IPs
        working-directory: terraform
        run: |
          NODE_IPS=$(terraform output -json droplet_ips | sed -n 2p | jq -r 'join(" ")')
          echo "NODE_IPS=$NODE_IPS" >> $GITHUB_ENV
          echo "Node IPs: $NODE_IPS"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Build Rust Binary
        working-directory: code
        run: cargo build -p ${{ env.BINARY_NAME }} --release

      - name: Run Testnet Setup (Generate Configs)
        run: |
          ./code/target/release/${{ env.BINARY_NAME }} testnet -n ${{ env.NODE_COUNT }}
          ls -R $HOME/.malachite/

      - name: Modify Config Files with Public IPs
        run: |
          NODE_IP_ARRAY=($NODE_IPS)

          for i in "${!NODE_IP_ARRAY[@]}"; do
            CONFIG_FILE="$HOME/.malachite/$i/config/config.toml"
            pwd
            ls -R $CONFIG_FILE

            echo "Checking for file: $CONFIG_FILE"
            if [ ! -f "$CONFIG_FILE" ]; then
                echo "Error: $CONFIG_FILE does not exist!"
                continue
            fi

            # Set the correct listen_addr: each node gets its public IP but uses port 27000
            sed -i "s|listen_addr = \"/ip4/127.0.0.1/tcp/2700$i\"|listen_addr = \"/ip4/${NODE_IP_ARRAY[$i]}/tcp/27000\"|" "$CONFIG_FILE"

            # Replace each peer's address based on known index
            for j in "${!NODE_IP_ARRAY[@]}"; do
              if [ $j -ne $i ]; then
                OLD_PEER_ADDR="/ip4/127.0.0.1/tcp/2700$j"
                NEW_PEER_ADDR="/ip4/${NODE_IP_ARRAY[$j]}/tcp/27000"  # All peers use port 27000
                sed -i "s|$OLD_PEER_ADDR|$NEW_PEER_ADDR|g" "$CONFIG_FILE"
              fi
            done

            echo "Updated $CONFIG_FILE for Node $i"
          done

      - name: Write SSH Key
        run: |
          printf "%s" "${{ secrets.DO_SSH_KEY }}" | sed 's/\r//' > private_key
          chmod 600 private_key

      - name: Upload Modified Config Files to Nodes
        run: |
          NODE_IP_ARRAY=($NODE_IPS)

          for i in "${!NODE_IP_ARRAY[@]}"; do
            echo "Uploading $HOME/.malachite/$i/config/config.toml to Node $i (${NODE_IP_ARRAY[$i]})"

            ssh -i private_key -o StrictHostKeyChecking=no root@${NODE_IP_ARRAY[$i]} "mkdir -p /root/.malachite/config/"

            scp -i private_key -o StrictHostKeyChecking=no \
              $HOME/.malachite/$i/config/config.toml \
              root@${NODE_IP_ARRAY[$i]}:/root/.malachite/config/config.toml &
          done
          wait

      - name: Upload Binary to Nodes
        run: |
          for ip in $NODE_IPS; do
            scp -i private_key -o StrictHostKeyChecking=no ./code/target/release/${{ env.BINARY_NAME }} root@$ip:/root/ &
          done
          wait

      - name: Start Nodes with Updated Config
        run: |
          for ip in $NODE_IPS; do
            ssh -i private_key -o StrictHostKeyChecking=no root@$ip "cd /root && /root/${{ env.BINARY_NAME }} start" &
          done
          wait

      - name: Terraform Destroy (Cleanup Nodes)
        if: always()
        working-directory: terraform
        run: |
          terraform destroy -auto-approve \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="do_ssh_fingerprint=${{ secrets.DO_SSH_FINGERPRINT }}"
      
      - name: Cleanup SSH Key
        if: always()
        run: rm -f private_key
