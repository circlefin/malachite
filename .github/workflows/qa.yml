name: QA

on:
  workflow_dispatch:
  push:
    branches:
      - nenad/800-run-qa-from-git

jobs:
  run-rust-binary:
    runs-on: ubuntu-latest
    env:
      BINARY_NAME: informalsystems-malachitebft-starknet-app

    steps:
      - name: Set up DigitalOcean CLI
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.96.0/doctl-1.96.0-linux-amd64.tar.gz | tar -xz
          sudo mv doctl /usr/local/bin/
          doctl auth init -t ${{ secrets.DO_TOKEN }}

      - name: Create Droplet
        run: |
          doctl compute droplet create test-ssh-droplet \
            --size s-1vcpu-1gb \
            --region nyc1 \
            --image ubuntu-22-04-x64 \
            --ssh-keys ${{ secrets.DO_SSH_FINGERPRINT }} \
            --wait

      - name: Wait for Initialization
        run: |
          echo "Waiting for droplet initialization..."
          sleep 20

      - name: Extract Droplet Details
        run: |
          DROPLET_INFO=$(doctl compute droplet list --format ID,Name,PublicIPv4 --no-header | grep test-ssh-droplet)
          export DROPLET_ID=$(echo "$DROPLET_INFO" | awk '{print $1}')
          export DROPLET_IP=$(echo "$DROPLET_INFO" | awk '{print $3}')
          echo "DROPLET_ID=$DROPLET_ID" >> $GITHUB_ENV
          echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
          echo "Droplet ID: $DROPLET_ID"
          echo "Droplet IP: $DROPLET_IP"

      - name: Attach Firewall
        run: |
          doctl compute firewall add-droplets 72d70e52-595b-4a3b-95ec-238055c1dae6 \
            --droplet-ids ${{ env.DROPLET_ID }}

      - name: Wait for Initialization
        run: |
          echo "Waiting for firewall and SSH to initialize..."
          sleep 30

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Build Rust Binary
        working-directory: code
        run: cargo build -p ${{ env.BINARY_NAME }} --release

      - name: Write SSH Key
        run: |
          printf "%s" "${{ secrets.DO_SSH_KEY }}" | sed 's/\r//' > private_key
          chmod 600 private_key

      - name: Upload Binary to Droplet
        run: |
          scp -i private_key -o StrictHostKeyChecking=no ./code/target/release/${{ env.BINARY_NAME }} root@$DROPLET_IP:/root/

      - name: Execute Binary on Droplet
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no root@$DROPLET_IP "/root/${{ env.BINARY_NAME }}"

      - name: Destroy Droplet
        if: always()
        run: |
          doctl compute droplet delete ${{ env.DROPLET_ID }} --force

      - name: Cleanup SSH Key
        if: always()
        run: rm -f private_key
